<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Ship_placeholder</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_parent_save</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Crus0e

user_name = ""
first_name = ""
last_name = ""
char_x = 200
char_y = 300
char_scale = 4
b = 0
c = 0
d = 0

for(i = 0; i&lt; 11; i++)
{
    char_pos[i] = 0
}

for(i = 0; i &lt; 9; i++)
{
   editor_x[i] = 0 
}





if(!file_exists("savedgame.sav") ) 
{
    if(file_exists("startgame.sav"))
    {
        var _wrapper = loadJSONFromFile("startgame.sav")
        var _list = _wrapper[? "START"];
        for (var i = 0; i &lt; ds_list_size(_list); i++)
        {
            var _start = _list[| i];
            with(obj_ship)
            {
                
                user_name = _start[? "user_name"]
                first_name = _start[? "first_name"]
                last_name = _start[? "last_name"]
                b = _start[? "b"]
                d = _start[? "d"]
                char_pos[0] = _start[? "char_pos_0"]
                char_pos[1] = _start[? "char_pos_1"]
                char_pos[2] = _start[? "char_pos_2"]
                char_pos[3] = _start[? "char_pos_3"]
                char_pos[4] = _start[? "char_pos_4"]
                char_pos[5] = _start[? "char_pos_5"]
                char_pos[6] = _start[? "char_pos_6"]
                char_pos[7] = _start[? "char_pos_7"]
                char_pos[8] = _start[? "char_pos_8"]
                char_pos[9] = _start[? "char_pos_9"]
                char_pos[10] = _start[? "char_pos_10"]
                char_pos[11] = _start[? "char_pos_11"]
                
                for(i = 0; i &lt; b; i++ )
                    {
                        for(iii = 0; iii &lt; char_pos[i]; iii++)
                        {
                            position = string("char[") + string(i) + string(",") + string(iii) + string("]")
                            char[i,iii] = _start[? string("char[") + string(i) + string(",") + string(iii) + string("]")]
                            
                        }
                        
                        
                        
                    }
                    
                for(i = 0; i &lt; d ; i++)
                    {
                        position = string("editor_x[") + string(i) + string("]")
                        editor_x[i] = _start[? position]
                    }
               
                
                
                
                
                
                
            }
        }
        ds_map_destroy(_wrapper);
    }
}





sp = 0;
max_hp = 1000;
hp = max_hp;
ship_speed = 0.10;  //shiff speed für basic_ship
ship_turn = 5;      //shiff turn_speed für basic_ship
port = obj_default_info;
port_id = 0
trade_menu = 0
ii = 1
//Inventar

gold = 0;

//Debug

Debug = 0;
debug_port = 0;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Crus0e

scr_check_ports();  


//speed berechnung
speed = sp * ship_speed;
//Controlls
if(trade_menu == 0)
{
    if(keyboard_check(global.c_speed_up))
    {
        if(sp &lt; 100)
        {
            sp = sp + 1
        }
    }

    if(keyboard_check(global.c_speed_down))
    {
        if(sp &gt; 0)
        {
            sp = sp - 1
        }
    }
    
    if (keyboard_check(global.c_left))
    {
        direction += ship_turn;
        image_angle += ship_turn; 
    }

    if (keyboard_check(global.c_right))
    {
        direction -= ship_turn;
        image_angle -= ship_turn;
    }
}
//View Port
/*if instance_exists(obj_ship)
   {
   view_object[0] = obj_ship;
   }
   */
 
//Interaction

if(scr_check_ports() &gt; 0 &amp;&amp; keyboard_check_pressed(global.c_interact) &amp;&amp; sp == 0 )
{   
    if(trade_menu == 0)
    {
        trade_menu = 1
    }
    else
    {
        trade_menu = 0
    }
}
   
//Debug Mode
if(keyboard_check_pressed(global.c_debug))
{
    if(Debug = 0)
    {
        Debug = 1
    }
    else
    {
        Debug = 0
    }
}

//back to Menu
if(keyboard_check_pressed(global.c_esc))
{
    scr_save("savedgame.sav")
    global.first_start = 0
    room_goto(4)
}
// Player dead

if(hp &lt;= 0)
{
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Crus0e
 
 if(trade_menu == 1)
        {
            
            //Menu
                scr_interaction_menu();
            
                switch (ii)
                {
                    case 1:
                    if(keyboard_check(vk_enter))
                        {
                            gold = gold + port.gold;
                            port.gold = port.gold - port.gold;
                        }
                        
                    case 2:
                    if(keyboard_check(vk_enter))
                        {
                            trade_menu = 0
                        }
            }
        }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_island">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Crus0e

hp = hp - (sp * 0.01) * max_hp
sp = 0

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Crus0e

//Debug Mode

if(Debug = 1)
{
    draw_text(50,30,"Frames:")
    draw_text(120,30,obj_default_info.frame)
    draw_text(150,30,"Seconds:")
    draw_text(228,30,obj_default_info.s)
    draw_text(258,30,"Minutes:")
    draw_text(330,30,obj_default_info.m)
    draw_text(350,30,"Hours:")
    draw_text(403,30,obj_default_info.h)
    draw_text(423,30,"Days:")
    draw_text(473,30,obj_default_info.day)


    draw_text(50,50, "speed:")
    draw_text(120,50, sp)
    draw_text(50,70,"Health:")
    draw_text(120,70, hp)
    draw_text(50,90,"PortG:")
    draw_text(120,90,obj_port.gold)
    draw_text(50,110,"SchipG:")
    draw_text(120,110, gold)
    draw_text(50,130,"Port:")
    draw_text(120,130,debug_port)
    draw_text(50,150,"Iron_port_0:")
    draw_text(180,150,obj_port.Iron)
    draw_text(50,170,"Iron_Mine:")
    draw_text(180,170,obj_port.Iron_mine)
    
}

//Interact
if(trade_menu = 1)
{
    menu_color = make_color_rgb(238,55,55)
    draw_set_color(menu_color)
    draw_rectangle(50,50,975,720,false)
    draw_set_color(c_white)
    //draw menu
    
    switch (ii)
    {
        case 1:
            draw_text(170,50,"---&gt;")
        break;
    
        case 2:
            draw_text(170,70,"---&gt;")
        break;

    }
    
    draw_text(200,50,menu_interaction[0])
    draw_text(200,70,menu_interaction[1])

}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
