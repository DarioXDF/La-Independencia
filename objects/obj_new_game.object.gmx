<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Crus0e

name_set = 0
user_name = ""
first_name = ""
last_name = ""

lchar = 0
ii = 1
input_abfrage = 0
input = 0
vk_input = 0
curser_line = 0
char_editor = 0
b = 0 // anzahl der einträge
c = 0 // position in array



char_x = 200
char_y = 300
char_scale = 4


editor_y = 0
for(i = 0; i &lt; 9; i++)
{
   editor_x[i] = 0 
}


for(i = 0; i&lt;20; i++)
{
    pos[i] = 0
}

for(i = 0; i&lt;20; i++)
{
    pos_first[i] = 0
}

for(i = 0; i&lt;20; i++)
{
    pos_last[i] = 0
}

pos[20] = 1
pos_first[20] = 1
pos_last[20] = 1

//anzahl der möglichkeiten



//array char
    //ebene 0 = gender
        char[0,0] = "Male"
        char[0,1] = "Female"
    //ebene 1 = hair style
        char[1,0] = "standard"                                  
    //ebene 2 = hair color
        char[2,0] = spr_hair_placeholder_black                  
        char[2,1] = spr_hair_placeholder_yellow                 
        char[2,2] = spr_hair_placeholder_green                 
        char[2,3] = spr_hair_placeholder_purplegray               
    //ebene 3 = eye style
        char[3,0] = "standard"                                  
    //ebene 4 = eye color
        char[4,0] = spr_eyes_placeholder_white                 
        char[4,1] = spr_eyes_placeholder_green                  
        char[4,2] = spr_eyes_placeholder_darkblue               
        char[4,3] = spr_eyes_placeholder_purplegray             
    //ebene 5 = mouth style
        char[5,0] = spr_mouth_placeholder                       
    //ebene 6 = Head
        char[6,0] = spr_head_placeholder                        
        char[6,1] = spr_head_placeholder_1                      
        char[6,2] = spr_head_placeholder_2                      
        char[6,3] = spr_head_placeholder_3                      
    //ebene 7 = Body
        char[7,0] = spr_body_placeholder                        
        char[7,1] = spr_body_placeholder_1                      
        char[7,2] = spr_body_placeholder_2                      
        char[7,3] = spr_body_placeholder_3                                                    
    //ebene 8 = skin color
        char[8,0] = ""   
        char[8,1] = ""                                     
    //options     
    char[9,0] = "Gender:"
    char[9,1] = "Hair Style:"
    char[9,2] = "Hair Color:"
    char[9,3] = "Eye Style:"
    char[9,4] = "Eye Color:"
    char[9,5] = "Mouth Style:"
    char[9,6] = "Head Type:"
    char[9,7] = "Body Type:"
    char[9,8] = "Skin Color:"
    
    //hair colors
    char[10,0] = "Black"
    char[10,1] = "Yellow"
    char[10,2] = "Green"
    char[10,3] = "Purplegray"
    
    //eye colors
    char[11,0] = "white"
    char[11,1] = "green"
    char[11,2] = "darkblue"
    char[11,3] = "purplegray"
    
   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Crus0e

scr_get_input()
switch(curser_line)
{   
    case 0:
        if(input != 0 &amp;&amp; ii != 22 )
        {
            switch(ii)
            {
                case ii:
                    if(ii != 21) pos[ii - 1] = input
                break;
            }
            input = 0
    
        }
    break;
    
    case 1:
        if(input != 0 &amp;&amp; ii != 22 )
        {
            switch(ii)
            {
                case ii:
                    if(ii != 21) pos_first[ii - 1] = input
                break;
            }
            input = 0
    
        }
    break;
    
    case 2:
        if(input != 0 &amp;&amp; ii != 22 )
        {
            switch(ii)
            {
                case ii:
                    if(ii != 21) pos_last[ii - 1] = input
                break;
            }
            input = 0
    
        }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Crus0e

draw_text(50,50,"Enter user Name:")
for(i = 0; i &lt; 20; i++)
{
    draw_text(200 + 15 * i,52,"_")
}

draw_text(50,80,"Enter First Name:")
for(i = 0; i &lt; 20; i++)
{
    draw_text(200 + 15 * i,82,"_")
}

draw_text(50,110,"Enter Last Name:")
for(i = 0; i &lt; 20; i++)
{
    draw_text(200 + 15 * i,112,"_")
}



scr_main_menu("none",1,20)
//enter name
if(keyboard_check_released(global.c_menu_up) &amp;&amp; curser_line != 0)
{
    curser_line--
}
if(keyboard_check_released(global.c_menu_up) &amp;&amp; char_editor != 0 &amp;&amp; editor_y = 0)
{
    char_editor--
    curser_line = 2
    
}

if(keyboard_check_released(vk_enter) ||  keyboard_check_released(global.c_menu_down))
{
    
    switch(curser_line)
    {
        case 0:
            if(name_set = 1)
            {
                user_name = ""
            }
            
            for(i = 0; i&lt;20; i++)
            {
                if(pos[i] != 0)
                {
                    lchar++
                }
            }
            
            for(i = 0; i&lt;lchar; i++)
            {
                user_name = string(user_name) + string(pos[i])
            }
            
            if(string_length(string(user_name)) &lt; 4)
            {
                for(i = 0; i&lt;20; i++)
            {
                if(pos[i] != 0)
                {
                    pos[i] = 0
                }
                ii = 1
                user_name = ""
            }
            }
            else
            {
            curser_line++
            ii = 1
            
            }
        break;
        
        case 1:
            if(name_set = 1)
            {
                first_name = ""
            }
            
            for(i = 0; i&lt;20; i++)
            {
                if(pos_first[i] != 0)
                {
                    lchar++
                }
            }
            
            for(i = 0; i&lt;lchar; i++)
            {
                first_name = string(first_name) + string(pos_first[i])
            }
        
            
            if(string_length(string(first_name)) &lt; 4)
            {
                for(i = 0; i&lt;20; i++)
            {
                if(pos_first[i] != 0)
                {
                    pos_first[i] = 0
                }
                ii = 1
                first_name = ""
            }
            }
            else
            {
            curser_line++
            ii = 1
            
            }
        break;
        
        case 2:
            if(name_set = 1)
            {
                last_name = ""
            }
            
            for(i = 0; i&lt;20; i++)
            {
                if(pos_last[i] != 0)
                {
                    lchar++
                }
            }
            
            for(i = 0; i&lt;lchar; i++)
            {
                last_name = string(last_name) + string(pos_last[i])
            }
        
            if(string_length(string(last_name)) &lt; 4)
            {
                for(i = 0; i&lt;20; i++)
            {
                if(pos_last[i] != 0)
                {
                    pos_last[i] = 0
                }
                ii = 1
                last_name = ""
            }
            }
            else
            {
            char_editor = 1
            
            }
            
        break;
    }
    name_set = 1
    lchar = 0
    
    
}
//Remove
if(keyboard_check_pressed(vk_backspace) &amp;&amp; ii != 1 )
{
    switch(curser_line)
    {
    case 0:
        pos[ii - 2] = 0  
        ii--
    break;
       
    case 1:
        pos_first[ii - 2] = 0  
        ii--
    break;
        
    case 2:
        pos_last[ii - 2] = 0  
        ii--
    break;
    }
    
    
}
//move in array
switch(curser_line)
{
    case 0:
        if(pos[ii - 1] != 0)
        {
            if(ii != 21) ii++
        }
    break;
    
    case 1:
        if(pos_first[ii - 1] != 0)
        {
            if(ii != 21) ii++
        }
    break;
    
    case 2:
        if(pos_last[ii - 1] != 0)
        {
            if(ii != 21) ii++
        }
    break;
       
}
    

switch(ii)
{
    case ii:
        if(char_editor = 0)
        {
        if(ii - 1 = 0) draw_text(200   ,50 + (curser_line * 30),"|")
        else
        {
            draw_text(200 + (ii - 1) * 15  ,50 + (curser_line * 30),"|")
        }
        }
    break;
}


//Draw Name

for(i = 0; i&lt;20; i++)
{
    if(pos[i] !=0)
    {
        draw_text(200 + 15 * i , 50,pos[i])
    }
}

for(i = 0; i&lt;20; i++)
{
    if(pos_first[i] !=0)
    {
        draw_text(200 + 15 * i , 80,pos_first[i])
    }
}

for(i = 0; i&lt;20; i++)
{
    if(pos_last[i] !=0)
    {
        draw_text(200 + 15 * i , 110,pos_last[i])
    }
}



//Character Editor
draw_sprite_ext(char[7,editor_x[7]],image_index, char_x,char_y, char_scale, char_scale ,image_angle ,image_blend ,image_alpha)
draw_sprite_ext(char[6,editor_x[6]],image_index, char_x,char_y, char_scale, char_scale ,image_angle ,image_blend ,image_alpha)
draw_sprite_ext(char[4,editor_x[4]],image_index, char_x,char_y, char_scale, char_scale ,image_angle ,image_blend ,image_alpha)
draw_sprite_ext(char[5,editor_x[5]],image_index, char_x,char_y, char_scale, char_scale ,image_angle ,image_blend ,image_alpha)
draw_sprite_ext(char[2,editor_x[2]],image_index, char_x,char_y, char_scale, char_scale ,image_angle ,image_blend ,image_alpha)


if(char_editor = 1)
{
    if(keyboard_check_released(global.c_menu_down) &amp;&amp; editor_y != 8)
    {
        editor_y++
    }
    
    if(keyboard_check_released(global.c_menu_up) &amp;&amp; editor_y != 0)
    {
        editor_y--
    }
    
    if(keyboard_check_released(global.c_menu_left) &amp;&amp; editor_x[editor_y] != 0)
    {
        editor_x[editor_y] --
    }
    
    if(keyboard_check_released(global.c_menu_right))
    {
        if(editor_x[editor_y] != array_length_2d(char,editor_y) - 1)
        {
            editor_x[editor_y] ++
        }
        else
        {
            editor_x[editor_y] = 0
        }
    }
    draw_text(20,450 + editor_y * 30, "---&gt;")
    
    if(keyboard_check_released(vk_space))
    {
        var _start_list = ds_list_create();
        with (obj_new_game)
        {
            var _start = ds_map_create();
            ds_list_add(_start_list,_start)
            ds_list_mark_as_map(_start_list,ds_list_size(_start_list)-1);
            
            //save data
                    char_pos_0 = array_length_2d(char, 0)
                    char_pos_1 = array_length_2d(char, 1)
                    char_pos_2 = array_length_2d(char, 2)
                    char_pos_3 = array_length_2d(char, 3)
                    char_pos_4 = array_length_2d(char, 4)
                    char_pos_5 = array_length_2d(char, 5)
                    char_pos_6 = array_length_2d(char, 6)
                    char_pos_7 = array_length_2d(char, 7)
                    char_pos_8 = array_length_2d(char, 8)
                    char_pos_9 = array_length_2d(char, 9)
                    char_pos_10 = array_length_2d(char, 10)
                    char_pos_11 = array_length_2d(char, 11)
                //char[]
                   
                    b = array_height_2d(char) 
                                      
                    
                    
                    for(i = 0; i &lt; array_height_2d(char)  ; i++ )
                    {
                        for(iii = 0; iii &lt; array_length_2d(char,i) ; iii++)
                        {
                            position = string("char[") + string(i) + string(",") + string(iii) + string("]")
                            ds_map_add (_start, position, char[i,iii])
                            
                        }
                        
                        
                        
                    }
                    d = array_length_1d(editor_x)
                    for(i = 0; i &lt; array_length_1d(editor_x); i++)
                    {
                        position = string("editor_x[") + string(i) + string("]")
                        ds_map_add (_start, position, editor_x[i])
                    }
                   
            ds_map_add (_start,"user_name", user_name)
            ds_map_add (_start,"first_name", first_name)
            ds_map_add (_start,"last_name", last_name)
            ds_map_add (_start,"b", b)
            ds_map_add (_start,"d", d)
            ds_map_add (_start,"char_pos_0", char_pos_0)
            ds_map_add (_start,"char_pos_1", char_pos_1)
            ds_map_add (_start,"char_pos_2", char_pos_2)
            ds_map_add (_start,"char_pos_3", char_pos_3)
            ds_map_add (_start,"char_pos_4", char_pos_4)
            ds_map_add (_start,"char_pos_5", char_pos_5)
            ds_map_add (_start,"char_pos_6", char_pos_6)
            ds_map_add (_start,"char_pos_7", char_pos_7)
            ds_map_add (_start,"char_pos_8", char_pos_8)
            ds_map_add (_start,"char_pos_9", char_pos_9)
            ds_map_add (_start,"char_pos_10", char_pos_10)
            ds_map_add (_start,"char_pos_11", char_pos_11)
            
           
           
            
            //wrapper
            var _wrapper = ds_map_create();
            ds_map_add_list(_wrapper,"START" ,_start_list);
            
            //Save all
            var _string = json_encode(_wrapper);
            SaveStringToFile( "startgame.sav", _string);
            
            //Nuke Data
            ds_map_destroy(_wrapper);
        }
        room_goto(1)
    }
}

for(i = 0; i &lt; array_length_2d(char,9); i++)
{
    draw_text(50, 450 + i * 30, char[9,i])
}

draw_text(200,450, char[0,editor_x[0]])
draw_text(200,480, char[1,editor_x[1]])
draw_text(200,510, char[10,editor_x[2]])
draw_text(200,540, char[3,editor_x[3]])
draw_text(200,570, char[11,editor_x[4]])
draw_text(200,600, editor_x[5])
draw_text(200,630, editor_x[6])
draw_text(200,660, editor_x[7])
draw_text(200,690, editor_x[8])

draw_text(200,750, "press Space to Complete")





</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
